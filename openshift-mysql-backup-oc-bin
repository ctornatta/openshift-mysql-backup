#!/bin/bash
# This script initiates a mysqldump inside the MySQL container using the OpenShift "oc" binary.
# Important: Ensure that you are backing up into a persistent volume.


# takes defaults for prefix, database,etc..
BACKUP_LOC=${BACKUP_LOC:-/var/lib/mysql/data/backups}
DB_BACKUP_NAME_PREFIX=${DB_BACKUP_NAME_PREFIX:-MySQL-backup}
DATABASES=${DATABASES:-all}
VERIFY_API_TLS=${VERIFY_API_TLS:-yes}

#Ensure that the oc binary is in your path
oc version >> /dev/null 2>&1
if [ "$?" -gt "0" ] ; then
  printf "\nEnsure that the \"oc\" command is in your PATH"
  exit 1
fi

# read in source configuration file or read from ENV variables.
if [ -e "`dirname "$0"`/.openshift-mysql-backup.config" ] ; then
  echo Reading from configuration file.
  source "`dirname "$0"`/.openshift-mysql-backup.config"

else
  echo configuration file does not exist. read values from environment variables.
fi


# Ensure that all needed configuration variables exist.
if [ -n "${OSE_API}" -a -n "${PROJECT_NAME}" -a -n "${POD_SELECTOR}" -a -n "${API_TOKEN}" ] ; then
    echo Validation of configuration variables passed..
else
    echo Missing configuration values. Bailing...
    exit 1
fi

if [ "${VERIFY_API_TLS}" == "no" ] ; then
  echo Not veryifing OpenShift API TLS
  API_TLS="--insecure-skip-tls-verify=true"
else
  echo Verifying OpenShift API TLS
  API_TLS=""
fi

# get the current time
CURRENT_TIME=$(date "+%Y.%m.%d-%H.%M.%S")

echo
echo Starting execution at: $CURRENT_TIME
echo Configuration information
echo ---------------------------------------
echo MySQL Backup location: $BACKUP_LOC
echo MysQL mysql dump binary: $MYSQL_DUMP_BIN
echo OpenShift project name: $PROJECT_NAME
echo OpenShift mysql pod: $POD_SELECTOR
echo Verify API TLS: $VERIFY_API_TLS
echo MySQL Backup name prefix: $DB_BACKUP_NAME_PREFIX
echo MySQL databases to backup: $DATABASES
#Uncomment if needed
#echo OpenShift project API token: $API_TOKEN
echo ---------------------------------------
echo
echo Starting MySQL backup
echo ---------------------------------------
echo


# get the mysql pod name
DB_POD=$(oc ${API_TLS} --server=${OSE_API} --token=${API_TOKEN} -n ${PROJECT_NAME} get pods -l deploymentconfig=${POD_SELECTOR} --no-headers | awk '{print $1}')

# Create backup folder if it does not already exist
oc ${API_TLS} --server=${OSE_API} --token=${API_TOKEN} -n ${PROJECT_NAME} exec ${DB_POD} -- /bin/bash -c "if [ ! -d $BACKUP_LOC ] ; then echo Creating backup directory ; mkdir -p ${BACKUP_LOC} ; ls -al ${BACKUP_LOC} ; fi"

if [ "$DATABASES" != "all" ] ; then
  echo Peforming backup of the following databases: $DATABASES
  oc ${API_TLS} --server=${OSE_API} --token=${API_TOKEN} -n ${PROJECT_NAME} exec ${DB_POD} -- /bin/bash -c "mysqldump -u root --databases $DATABASES | gzip > ${BACKUP_LOC}/${DB_BACKUP_NAME_PREFIX}.${CURRENT_TIME}.sql.gz"
else
  echo Performing backup of all databases.
  oc ${API_TLS} --server=${OSE_API} --token=${API_TOKEN} -n ${PROJECT_NAME} exec ${DB_POD} -- /bin/bash -c "mysqldump -u root --events --all-databases | gzip > ${BACKUP_LOC}/${DB_BACKUP_NAME_PREFIX}.${CURRENT_TIME}.sql.gz"
fi

# Check the exit code of the oc exec command.
if [ "$?" == "1" ] ; then
  echo MySQL backup failed.
  echo
  exit 1
fi

echo MySQL backup completed. Backup written to the following location.
echo "  $DB_POD:${BACKUP_LOC}/${DB_BACKUP_NAME_PREFIX}.${CURRENT_TIME}.sql.gz"
echo
exit 0
